initSidebarItems({"constant":[["FEATURE_METADATA_SIZE",""],["INDICES_SIZE",""],["LAYER_METADATA_SIZE",""],["VERTEX_SIZE",""]],"enum":[["BackingBufferType",""],["Head",""],["TextureView","Describes a [`TextureView`]."]],"mod":[["buffer_pool","A ring-buffer like pool of buffers."],["globals","A bind group which binds a buffer with global data like the current camera transformations."],["pipeline","Utility for creating RenderPipelines"],["shader","Utilities for creating shader states."],["surface","Utilities for handling surfaces which can be either headless or headed. A headed surface has a handle to a window. A headless surface renders to a texture."],["texture","Utility for a texture view which can either be created by a `TextureView` or `SurfaceTexture`"],["tracked_render_pass","A render pass which allows tracking, for example using a tracing framework."]],"struct":[["BackingBufferDescriptor",""],["BufferDimensions",""],["BufferPool","This is inspired by the memory pool in Vulkan documented here."],["BufferedTextureHead",""],["FragmentState","Describes the fragment process in a render pipeline."],["Globals",""],["IndexEntry",""],["RenderPipelineDescriptor",""],["RingIndex",""],["Surface",""],["Texture",""],["TrackedRenderPass","A [`RenderPass`], which tracks the current pipeline state to ensure all draw calls are valid. It is used to set the current [`RenderPipeline`], `BindGroups` and buffers. After all requirements are specified, draw calls can be issued."],["VertexBufferLayout","Describes how the vertex buffer is interpreted."],["VertexState",""],["WindowHead",""]],"trait":[["Queue",""],["RenderPipeline",""]]});